use crate::result::IResult;

pub trait AltList<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O>;
    fn len(&self) -> usize;
}

// these code are generated by script
// Do not try to read!
impl<I, O, T> AltList<I, O> for (T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 2 }
}

impl<I, O, T> AltList<I, O> for (T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 3 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 4 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 5 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 6 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 7 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 8 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 9 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 10 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 11 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 12 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 13 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 14 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 15 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 16 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            16 => f16(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 17 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            16 => f16(input),
            17 => f17(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 18 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            16 => f16(input),
            17 => f17(input),
            18 => f18(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 19 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            16 => f16(input),
            17 => f17(input),
            18 => f18(input),
            19 => f19(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 20 }
}

impl<I, O, T> AltList<I, O> for (T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) where T: Fn(I) -> IResult<I, O> {
    fn apply_nth(&self, n: usize, input: I) -> IResult<I, O> {
        let (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20) = self;
        match n {
            0 => f0(input),
            1 => f1(input),
            2 => f2(input),
            3 => f3(input),
            4 => f4(input),
            5 => f5(input),
            6 => f6(input),
            7 => f7(input),
            8 => f8(input),
            9 => f9(input),
            10 => f10(input),
            11 => f11(input),
            12 => f12(input),
            13 => f13(input),
            14 => f14(input),
            15 => f15(input),
            16 => f16(input),
            17 => f17(input),
            18 => f18(input),
            19 => f19(input),
            20 => f20(input),
            _ => unreachable!()
        }
    }
    fn len(&self) -> usize { 21 }
}


#[test]
fn test_list() {
    use crate::tag::tag;

    let t1 = (tag("a"), tag("b"));
    assert_eq!(t1.len(), 2);
    let result1 = t1.apply_nth(0, "a");
    let result2 = t1.apply_nth(1, "a");
    assert!(result1.is_ok());
    assert_eq!(result1, Ok(("", "a")));
    assert!(result2.is_err());
    let result1 = t1.apply_nth(0, "b");
    let result2 = t1.apply_nth(1, "b");
    assert!(result1.is_err());
    assert!(result2.is_ok());
    assert_eq!(result2, Ok(("", "b")));

    let result1 = t1.apply_nth(0, "ab");
    let result2 = t1.apply_nth(1, "ab");
    assert!(result1.is_ok());
    assert_eq!(result1, Ok(("b", "a")));
    assert!(result2.is_err());

    let result1 = t1.apply_nth(0, "cd");
    let result2 = t1.apply_nth(1, "cd");
    assert!(result1.is_err());
    assert!(result2.is_err());
}